import numpy as np
import matplotlib.pyplot as plt

np.set_printoptions(suppress=True, precision=6)

# measurements = np.array(
#     [
#         [2426.656, 5.93156],
#         [2427.069, 5.948219],
#         [2427.482, 5.96457],
#         [2428.723, 6.010614],
#         [2429.966, 6.052957],
#         [2431.209, 6.090982],
#         [2432.039, 6.113889],
#         [2433.285, 6.144896],
#         [2434.531, 6.171968],
#         [2435.779, 6.194721],
#         [2437.028, 6.213465],
#         [2437.861, 6.224031],
#         [2439.528, 6.240074],
#         [2440.78, 6.247941],
#         [2442.033, 6.252492],
#         [2443.286, 6.253957],
#         [2444.958, 6.250947],
#         [2446.631, 6.243388],
#         [2448.306, 6.231278],
#         [2449.563, 6.219321],
#         [2450.82, 6.204821],
#         [2451.658, 6.194253],
#         [2452.917, 6.176358],
#         [2454.175, 6.156998],
#         [2455.435, 6.136714],
#         [2456.694, 6.115969],
#         [2457.954, 6.095147],
#         [2459.209, 6.074943],
#         [2460.47, 6.056321],
#         [2461.732, 6.038318],
#         [2462.573, 6.026834],
#         [2463.836, 6.010536],
#         [2465.099, 5.995165],
#         [2466.363, 5.981186],
#         [2467.626, 5.968368],
#         [2468.469, 5.960595],
#         [2469.734, 5.94994],
#         [2470.998, 5.940828],
#         [2471.841, 5.935528],
#         [2473.528, 5.92655],
#         [2474.793, 5.921151],
#         [2476.059, 5.917143],
#         [2477.325, 5.914371],
#         [2477.747, 5.913653],
#         [2479.013, 5.912426],
#         [2479.857, 5.912148],
#         [2481.124, 5.912544],
#         [2482.391, 5.914101],
#         [2483.658, 5.916353],
#         [2484.926, 5.919532],
#         [2486.193, 5.923561],
#         [2487.461, 5.928593],
#         [2488.729, 5.931928],
#         [2489.996, 5.931404],
#         [2490.842, 5.928506],
#         [2492.11, 5.919414],
#         [2493.378, 5.904068],
#         [2494.103, 5.911152],
#         [2495.368, 5.998028],
#         [2496.635, 6.077274],
#         [2497.901, 6.148653],
#         [2499.168, 6.212163],
#         [2500.436, 6.267806],
#         [2501.703, 6.315581],
#         [2502.972, 6.355965],
#         [2504.24, 6.38912],
#         [2505.083, 6.407325],
#         [2506.317, 6.428777],
#         [2507.514, 6.443756],
#         [2508.676, 6.452921],
#         [2509.8, 6.45764],
#         [2510.91, 6.457962],
#         [2512.026, 6.454468],
#         [2512.772, 6.450204],
#         [2513.896, 6.441016],
#         [2515.025, 6.428673],
#         [2516.159, 6.41352],
#         [2517.285, 6.395662],
#         [2518.376, 6.375819],
#         [2519.433, 6.354445],
#         [2520.456, 6.331617],
#         [2521.119, 6.315959],
#         [2522.085, 6.291708],
#         [2523.019, 6.266918],
#         [2523.92, 6.241774],
#         [2524.79, 6.216406],
#         [2525.628, 6.191473],
#         [2526.169, 6.175092],
#         [2526.955, 6.150774],
#         [2527.71, 6.126727],
#         [2528.436, 6.103319],
#         [2529.046, 6.081931],
#         [2529.592, 6.082284],
#         [2530.229, 6.082452],
#         [2530.836, 6.082396],
#         [2531.226, 6.082417],
#         [2531.786, 6.0824],
#         [2532.318, 6.082112],
#         [2532.822, 6.081747],
#         [2533.299, 6.081213],
#         [2533.749, 6.0807],
#         [2534.172, 6.080166],
#         [2534.568, 6.079607],
#         [2534.817, 6.07929],
#         [2535.17, 6.07894],
#         [2535.497, 6.078337],
#         [2535.798, 6.077717],
#         [2536.075, 6.077089],
#         [2426.656, 5.93156],
#         [2427.069, 5.948219],
#         [2427.482, 5.96457],
#         [2428.723, 6.010614],
#         [2429.966, 6.052957],
#         [2431.209, 6.090982],
#         [2432.039, 6.113889],
#         [2433.285, 6.144896],
#         [2434.531, 6.171968],
#         [2435.779, 6.194721],
#         [2437.028, 6.213465],
#         [2437.861, 6.224031],
#         [2439.528, 6.240074],
#         [2440.78, 6.247941],
#         [2442.033, 6.252492],
#         [2443.286, 6.253957],
#         [2444.958, 6.250947],
#         [2446.631, 6.243388],
#         [2448.306, 6.231278],
#         [2449.563, 6.219321],
#         [2450.82, 6.204821],
#         [2451.658, 6.194253],
#         [2452.917, 6.176358],
#         [2454.175, 6.156998],
#         [2455.435, 6.136714],
#         [2456.694, 6.115969],
#         [2457.954, 6.095147],
#         [2459.209, 6.074943],
#         [2460.47, 6.056321],
#         [2461.732, 6.038318],
#         [2462.573, 6.026834],
#         [2463.836, 6.010536],
#         [2465.099, 5.995165],
#         [2466.363, 5.981186],
#         [2467.626, 5.968368],
#         [2468.469, 5.960595],
#         [2469.734, 5.94994],
#         [2470.998, 5.940828],
#         [2471.841, 5.935528],
#         [2473.528, 5.92655],
#         [2474.793, 5.921151],
#         [2476.059, 5.917143],
#         [2477.325, 5.914371],
#         [2477.747, 5.913653],
#         [2479.013, 5.912426],
#         [2479.857, 5.912148],
#         [2481.124, 5.912544],
#         [2482.391, 5.914101],
#         [2483.658, 5.916353],
#         [2484.926, 5.919532],
#         [2486.193, 5.923561],
#         [2487.461, 5.928593],
#         [2488.729, 5.931928],
#         [2489.996, 5.931404],
#         [2490.842, 5.928506],
#         [2492.11, 5.919414],
#         [2493.378, 5.904068],
#         [2494.103, 5.911152],
#         [2495.368, 5.998028],
#         [2496.635, 6.077274],
#         [2497.901, 6.148653],
#         [2499.168, 6.212163],
#         [2500.436, 6.267806],
#         [2501.703, 6.315581],
#         [2502.972, 6.355965],
#         [2504.24, 6.38912],
#         [2505.083, 6.407325],
#         [2506.317, 6.428777],
#         [2507.514, 6.443756],
#         [2508.676, 6.452921],
#         [2509.8, 6.45764],
#         [2510.91, 6.457962],
#         [2512.026, 6.454468],
#         [2512.772, 6.450204],
#         [2513.896, 6.441016],
#         [2515.025, 6.428673],
#         [2516.159, 6.41352],
#         [2517.285, 6.395662],
#         [2518.376, 6.375819],
#         [2519.433, 6.354445],
#         [2520.456, 6.331617],
#         [2521.119, 6.315959],
#         [2522.085, 6.291708],
#         [2523.019, 6.266918],
#         [2523.92, 6.241774],
#         [2524.79, 6.216406],
#         [2525.628, 6.191473],
#         [2526.169, 6.175092],
#         [2526.955, 6.150774],
#         [2527.71, 6.126727],
#         [2528.436, 6.103319],
#         [2529.046, 6.081931],
#         [2529.592, 6.082284],
#         [2530.229, 6.082452],
#         [2530.836, 6.082396],
#         [2531.226, 6.082417],
#         [2531.786, 6.0824],
#         [2532.318, 6.082112],
#         [2532.822, 6.081747],
#         [2533.299, 6.081213],
#         [2533.749, 6.0807],
#         [2534.172, 6.080166],
#         [2534.568, 6.079607],
#         [2534.817, 6.07929],
#         [2535.17, 6.07894],
#         [2535.497, 6.078337],
#         [2535.798, 6.077717],
#         [2536.075, 6.077089],
#     ]
# )


def t1(t):
    return t


def t2(t):
    return 1 / 2 * t ** 2


def t3(t):
    return 1 / 6 * t ** 3


def t4(t):
    return 1 / 12 * t ** 4


def get_A4(t):
    A = np.eye(4)
    A[0][1] = t1(t)
    A[0][2] = t2(t)
    A[0][3] = t3(t)

    A[1][2] = t1(t)
    A[1][3] = t2(t)

    A[2][3] = t1(t)
    return A


def get_A3(dt):
    A = np.eye(3)
    A[0][1] = t1(t)
    A[0][2] = t2(t)

    A[1][2] = t1(t)

    return A


def kf_filter(measurements, dt):
    mu = np.zeros(8).reshape(-1, 1)
    sigma = np.eye(8) * 100.0

    R = np.eye(8)
    Q = np.eye(2)

    A = np.eye(8)
    A[:4, :4] = get_A4(dt)
    A[4:, 4:] = get_A4(dt)

    C = np.array([[1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0]])

    def predict(mu_, sigma_, A_):
        mu_hat = A_ @ mu_
        sigma_hat = A_ @ sigma_ @ A_.T + R
        return mu_hat, sigma_hat

    x = []
    sigmas = []
    for z in measurements:
        z = z.reshape(-1, 1)
        mu_hat, sigma_hat = predict(mu, sigma, A)

        K = sigma_hat @ C.T @ np.linalg.inv(C @ sigma_hat @ C.T + Q)
        mu = mu_hat + K @ (z - C @ mu_hat)
        sigma = (np.eye(8) - K @ C) @ sigma_hat
        x.append(mu)
        sigmas.append(sigma)
    x = np.asarray(x).squeeze()
    sigmas = np.asarray(sigmas).squeeze()
    return x, sigmas, predict


if __name__ == '__main__':
    from IPython import embed

    jerk = 0.0001

    def acc(t):
        return jerk * t

    def vel(t):
        return acc(t) * t + 1 / 2 * jerk * t ** 2

    def pos(t):
        return vel(t) * t + 1 / 2 * acc(t) * t ** 2 + 1 / 6 * jerk * t ** 3

    acc2 = 0.5

    def vel2(t):
        return acc2 * t

    def pos2(t):
        return vel2(t) * t + 1 / 2 * acc2 * t ** 2

    import random

    starttime = 0.0
    endtime = 600.0
    dt = 1.0
    times = np.arange(0.0, endtime, dt)
    m = np.array(
        [[pos(t) + random.gauss(0, 5.0), pos2(t) + random.gauss(0, 1.0)] for t in times]
    )

    delta_t = 100.0
    times2 = np.arange(0.0, endtime + delta_t, dt)

    x, sigmas, predict = kf_filter(m, dt)
    A = np.eye(8)
    A[:4, :4] = get_A4(delta_t)
    A[4:, 4:] = get_A4(delta_t)

    pred_x, pred_sigma = predict(x[-1], sigmas[-1], A)

    plt.subplot(321)
    plt.plot(times, m[:, 0], label='Measurements')
    plt.plot(
        endtime + delta_t,
        pred_x[0],
        'ro',
        markersize=5,
        label=f'Prediction, delta_t={delta_t}',
    )
    plt.plot(times, x[:, 0], label='KF', linewidth=1.0)
    plt.plot(times2, pos(times2), label='Ground Truth')
    std = np.sqrt(sigmas[:, 0, 0])
    plt.fill_between(times, x[:, 0] - std, x[:, 0] + std, alpha=0.5)
    plt.title("Displacement X")
    plt.legend()

    plt.subplot(322)
    plt.plot(times, m[:, 1], label='Measurements')
    plt.plot(
        endtime + delta_t,
        pred_x[4],
        'ro',
        markersize=5,
        label=f'Prediction, delta_t={delta_t}',
    )
    plt.plot(times, x[:, 4], label='KF', linewidth=1.0)
    plt.plot(times2, pos2(times2), label='Ground Truth')
    std = np.sqrt(sigmas[:, 4, 4])
    plt.fill_between(times, x[:, 4] - std, x[:, 4] + std, alpha=0.5)
    plt.title("Displacement Y")
    plt.legend()

    plt.subplot(323)
    plt.plot(times, x[:, 1], label='KF', linewidth=1.0)
    plt.plot(
        endtime + delta_t,
        pred_x[1],
        'ro',
        markersize=5,
        label=f'Prediction, delta_t={delta_t}',
    )
    plt.plot(times2, vel(times2), label='Ground Truth')
    std = np.sqrt(sigmas[:, 1, 1])
    plt.fill_between(times, x[:, 1] - std, x[:, 1] + std, alpha=0.5)
    plt.title("Velocity X")
    plt.legend()

    plt.subplot(324)
    plt.plot(times, x[:, 5], label='KF', linewidth=1.0)
    plt.plot(
        endtime + delta_t,
        pred_x[5],
        'ro',
        markersize=5,
        label=f'Prediction, delta_t={delta_t}',
    )
    plt.plot(times2, vel2(times2), label='Ground Truth')
    std = np.sqrt(sigmas[:, 5, 5])
    plt.fill_between(times, x[:, 5] - std, x[:, 5] + std, alpha=0.5)
    plt.title("Velocity Y")
    plt.legend()

    plt.subplot(325)
    plt.plot(times, x[:, 2], label='KF', linewidth=1.0)
    plt.plot(
        endtime + delta_t,
        pred_x[2],
        'ro',
        markersize=5,
        label=f'Prediction, delta_t={delta_t}',
    )
    plt.plot(times2, acc(times2), label='Ground Truth')
    std = np.sqrt(sigmas[:, 2, 2])
    plt.fill_between(times, x[:, 2] - std, x[:, 2] + std, alpha=0.5)
    plt.title("Acc X")
    plt.legend()

    plt.subplot(326)
    plt.plot(times, x[:, 6], label='KF', linewidth=1.0)
    plt.plot(
        endtime + delta_t,
        pred_x[6],
        'ro',
        markersize=5,
        label=f'Prediction, delta_t={delta_t}',
    )
    plt.plot(times2, np.ones(len(times2)) * acc2, label='Ground Truth')
    std = np.sqrt(sigmas[:, 6, 6])
    plt.fill_between(times, x[:, 6] - std, x[:, 6] + std, alpha=0.5)
    plt.title("Acc Y")
    plt.legend()

    plt.ion()
    plt.show(block=False)
    plt.tight_layout()
    embed()
